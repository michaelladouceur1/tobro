// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package main

import (
	"github.com/gin-gonic/gin"
)

// ConnectRequest defines model for ConnectRequest.
type ConnectRequest struct {
	Port string `json:"port"`
}

// ConnectResponse defines model for ConnectResponse.
type ConnectResponse struct {
	Port      *string `json:"port,omitempty"`
	Timestamp *int    `json:"timestamp,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message,omitempty"`
}

// Pong defines model for Pong.
type Pong struct {
	Ping string `json:"ping"`
}

// SetupPinRequest defines model for SetupPinRequest.
type SetupPinRequest struct {
	Mode string `json:"mode"`
	Pin  int    `json:"pin"`
}

// SetupPinResponse defines model for SetupPinResponse.
type SetupPinResponse struct {
	Mode *string `json:"mode,omitempty"`
	Pin  *int    `json:"pin,omitempty"`
}

// WritePinRequest defines model for WritePinRequest.
type WritePinRequest struct {
	Pin   int `json:"pin"`
	Value int `json:"value"`
}

// WritePinResponse defines model for WritePinResponse.
type WritePinResponse struct {
	Pin   *int `json:"pin,omitempty"`
	Value *int `json:"value,omitempty"`
}

// PostDelayJSONBody defines parameters for PostDelay.
type PostDelayJSONBody struct {
	Delay int `json:"delay"`
}

// PostConnectJSONRequestBody defines body for PostConnect for application/json ContentType.
type PostConnectJSONRequestBody = ConnectRequest

// PostDelayJSONRequestBody defines body for PostDelay for application/json ContentType.
type PostDelayJSONRequestBody PostDelayJSONBody

// PostSetupPinJSONRequestBody defines body for PostSetupPin for application/json ContentType.
type PostSetupPinJSONRequestBody = SetupPinRequest

// PostWritePinJSONRequestBody defines body for PostWritePin for application/json ContentType.
type PostWritePinJSONRequestBody = WritePinRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /connect)
	PostConnect(c *gin.Context)

	// (POST /delay)
	PostDelay(c *gin.Context)

	// (GET /ping)
	GetPing(c *gin.Context)

	// (POST /setup_pin)
	PostSetupPin(c *gin.Context)

	// (POST /write_pin)
	PostWritePin(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostConnect operation middleware
func (siw *ServerInterfaceWrapper) PostConnect(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostConnect(c)
}

// PostDelay operation middleware
func (siw *ServerInterfaceWrapper) PostDelay(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostDelay(c)
}

// GetPing operation middleware
func (siw *ServerInterfaceWrapper) GetPing(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPing(c)
}

// PostSetupPin operation middleware
func (siw *ServerInterfaceWrapper) PostSetupPin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSetupPin(c)
}

// PostWritePin operation middleware
func (siw *ServerInterfaceWrapper) PostWritePin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostWritePin(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/connect", wrapper.PostConnect)
	router.POST(options.BaseURL+"/delay", wrapper.PostDelay)
	router.GET(options.BaseURL+"/ping", wrapper.GetPing)
	router.POST(options.BaseURL+"/setup_pin", wrapper.PostSetupPin)
	router.POST(options.BaseURL+"/write_pin", wrapper.PostWritePin)
}
