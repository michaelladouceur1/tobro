// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"github.com/gin-gonic/gin"
)

// Defines values for AxisType.
const (
	Angular AxisType = "angular"
	Linear  AxisType = "linear"
)

// Axis defines model for Axis.
type Axis struct {
	Id       *string  `json:"id,omitempty"`
	Max      float32  `json:"max"`
	MaxSpeed float32  `json:"max_speed"`
	Min      float32  `json:"min"`
	MinSpeed float32  `json:"min_speed"`
	Type     AxisType `json:"type"`
	Value    *float32 `json:"value,omitempty"`
}

// AxisType defines model for Axis.Type.
type AxisType string

// RotateAxisRequest defines model for RotateAxisRequest.
type RotateAxisRequest struct {
	Angle  float32 `json:"angle"`
	AxisId *string `json:"axis_id,omitempty"`
}

// PostAxisJSONRequestBody defines body for PostAxis for application/json ContentType.
type PostAxisJSONRequestBody = Axis

// PostRotateAxisJSONRequestBody defines body for PostRotateAxis for application/json ContentType.
type PostRotateAxisJSONRequestBody = RotateAxisRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /axis)
	GetAxis(c *gin.Context)

	// (POST /axis)
	PostAxis(c *gin.Context)

	// (POST /rotate_axis)
	PostRotateAxis(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAxis operation middleware
func (siw *ServerInterfaceWrapper) GetAxis(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAxis(c)
}

// PostAxis operation middleware
func (siw *ServerInterfaceWrapper) PostAxis(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAxis(c)
}

// PostRotateAxis operation middleware
func (siw *ServerInterfaceWrapper) PostRotateAxis(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostRotateAxis(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/axis", wrapper.GetAxis)
	router.POST(options.BaseURL+"/axis", wrapper.PostAxis)
	router.POST(options.BaseURL+"/rotate_axis", wrapper.PostRotateAxis)
}
