/* tslint:disable */
/* eslint-disable */
/**
 * tobro_http_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PinResponse
 */
export interface PinResponse {
    /**
     * 
     * @type {number}
     * @memberof PinResponse
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PinResponse
     */
    type?: PinResponseTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PinResponse
     */
    mode?: number;
    /**
     * 
     * @type {number}
     * @memberof PinResponse
     */
    min?: number;
    /**
     * 
     * @type {number}
     * @memberof PinResponse
     */
    max?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PinResponse
     */
    digitalRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PinResponse
     */
    digitalWrite?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PinResponse
     */
    analogRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PinResponse
     */
    analogWrite?: boolean;
}


/**
 * @export
 */
export const PinResponseTypeEnum = {
    Analog: 'analog',
    Digital: 'digital'
} as const;
export type PinResponseTypeEnum = typeof PinResponseTypeEnum[keyof typeof PinResponseTypeEnum];


/**
 * Check if a given object implements the PinResponse interface.
 */
export function instanceOfPinResponse(value: object): value is PinResponse {
    return true;
}

export function PinResponseFromJSON(json: any): PinResponse {
    return PinResponseFromJSONTyped(json, false);
}

export function PinResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PinResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'type': json['type'] == null ? undefined : json['type'],
        'mode': json['mode'] == null ? undefined : json['mode'],
        'min': json['min'] == null ? undefined : json['min'],
        'max': json['max'] == null ? undefined : json['max'],
        'digitalRead': json['digitalRead'] == null ? undefined : json['digitalRead'],
        'digitalWrite': json['digitalWrite'] == null ? undefined : json['digitalWrite'],
        'analogRead': json['analogRead'] == null ? undefined : json['analogRead'],
        'analogWrite': json['analogWrite'] == null ? undefined : json['analogWrite'],
    };
}

export function PinResponseToJSON(value?: PinResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'type': value['type'],
        'mode': value['mode'],
        'min': value['min'],
        'max': value['max'],
        'digitalRead': value['digitalRead'],
        'digitalWrite': value['digitalWrite'],
        'analogRead': value['analogRead'],
        'analogWrite': value['analogWrite'],
    };
}

