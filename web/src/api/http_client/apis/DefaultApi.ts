/* tslint:disable */
/* eslint-disable */
/**
 * tobro_http_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalogWritePinRequest,
  AnalogWritePinResponse,
  BoardsResponse,
  CircuitResponse,
  ConnectRequest,
  ConnectResponse,
  CreateCircuitRequest,
  DigitalWritePinRequest,
  DigitalWritePinResponse,
  ErrorResponse,
  Pong,
  SaveCircuitRequest,
  SetupPinRequest,
  SetupPinResponse,
} from '../models/index';
import {
    AnalogWritePinRequestFromJSON,
    AnalogWritePinRequestToJSON,
    AnalogWritePinResponseFromJSON,
    AnalogWritePinResponseToJSON,
    BoardsResponseFromJSON,
    BoardsResponseToJSON,
    CircuitResponseFromJSON,
    CircuitResponseToJSON,
    ConnectRequestFromJSON,
    ConnectRequestToJSON,
    ConnectResponseFromJSON,
    ConnectResponseToJSON,
    CreateCircuitRequestFromJSON,
    CreateCircuitRequestToJSON,
    DigitalWritePinRequestFromJSON,
    DigitalWritePinRequestToJSON,
    DigitalWritePinResponseFromJSON,
    DigitalWritePinResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PongFromJSON,
    PongToJSON,
    SaveCircuitRequestFromJSON,
    SaveCircuitRequestToJSON,
    SetupPinRequestFromJSON,
    SetupPinRequestToJSON,
    SetupPinResponseFromJSON,
    SetupPinResponseToJSON,
} from '../models/index';

export interface AnalogWritePinPostRequest {
    analogWritePinRequest?: AnalogWritePinRequest;
}

export interface CircuitPostRequest {
    createCircuitRequest?: CreateCircuitRequest;
}

export interface ConnectPostRequest {
    connectRequest?: ConnectRequest;
}

export interface DigitalWritePinPostRequest {
    digitalWritePinRequest?: DigitalWritePinRequest;
}

export interface SaveCircuitPostRequest {
    saveCircuitRequest?: SaveCircuitRequest;
}

export interface SetupPinPostRequest {
    setupPinRequest?: SetupPinRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async analogWritePinPostRaw(requestParameters: AnalogWritePinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalogWritePinResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/analog_write_pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalogWritePinRequestToJSON(requestParameters['analogWritePinRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalogWritePinResponseFromJSON(jsonValue));
    }

    /**
     */
    async analogWritePinPost(requestParameters: AnalogWritePinPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalogWritePinResponse> {
        const response = await this.analogWritePinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async boardsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BoardsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/boards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BoardsResponseFromJSON(jsonValue));
    }

    /**
     */
    async boardsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BoardsResponse> {
        const response = await this.boardsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async circuitGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircuitResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/circuit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircuitResponseFromJSON(jsonValue));
    }

    /**
     */
    async circuitGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircuitResponse> {
        const response = await this.circuitGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async circuitPostRaw(requestParameters: CircuitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircuitResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/circuit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCircuitRequestToJSON(requestParameters['createCircuitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircuitResponseFromJSON(jsonValue));
    }

    /**
     */
    async circuitPost(requestParameters: CircuitPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircuitResponse> {
        const response = await this.circuitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async connectPostRaw(requestParameters: ConnectPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConnectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectRequestToJSON(requestParameters['connectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConnectResponseFromJSON(jsonValue));
    }

    /**
     */
    async connectPost(requestParameters: ConnectPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConnectResponse> {
        const response = await this.connectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async digitalWritePinPostRaw(requestParameters: DigitalWritePinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DigitalWritePinResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/digital_write_pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalWritePinRequestToJSON(requestParameters['digitalWritePinRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalWritePinResponseFromJSON(jsonValue));
    }

    /**
     */
    async digitalWritePinPost(requestParameters: DigitalWritePinPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DigitalWritePinResponse> {
        const response = await this.digitalWritePinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async pingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pong>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PongFromJSON(jsonValue));
    }

    /**
     */
    async pingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pong> {
        const response = await this.pingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async saveCircuitPostRaw(requestParameters: SaveCircuitPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CircuitResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/save_circuit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveCircuitRequestToJSON(requestParameters['saveCircuitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CircuitResponseFromJSON(jsonValue));
    }

    /**
     */
    async saveCircuitPost(requestParameters: SaveCircuitPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CircuitResponse> {
        const response = await this.saveCircuitPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setupPinPostRaw(requestParameters: SetupPinPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupPinResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/setup_pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetupPinRequestToJSON(requestParameters['setupPinRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetupPinResponseFromJSON(jsonValue));
    }

    /**
     */
    async setupPinPost(requestParameters: SetupPinPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupPinResponse> {
        const response = await this.setupPinPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
